import { EventBridgeClient, PutEventsCommand } from "@aws-sdk/client-eventbridge";

const client = new EventBridgeClient({ region: process.env.AWS_REGION });

// simple timeout wrapper without TypeScript generics
function withTimeout(promise: Promise<any>, ms: number) {
  return Promise.race([
    promise,
    new Promise((_, reject) =>
      setTimeout(() => reject(new Error("Timeout")), ms)
    ),
  ]);
}

export const handler = async (event: any) => {
  console.log("Received SNS event:", JSON.stringify(event));

  const message = event.Records?.[0]?.Sns?.Message ?? '{}';
  
  const params = {
    Entries: [
      {
        Source: 'custom.sns.source',
        DetailType: 'SNSMessage',
        Detail: message,
        EventBusName: process.env.EVENT_BUS_NAME,
      },
    ],
  };

  try {
    const result = await withTimeout(
      client.send(new PutEventsCommand(params)),
      5000 // 5 seconds
    );
    console.log("Event sent to EventBridge:", result);
  } catch (err) {
    console.error("Failed to send event or timed out:", err);
    throw err;
  }
};

