import * as cdk from 'aws-cdk-lib';
import { Stack, StackProps, Duration, CfnOutput } from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as sns from 'aws-cdk-lib/aws-sns';
import * as sns_subs from 'aws-cdk-lib/aws-sns-subscriptions';
import * as sqs from 'aws-cdk-lib/aws-sqs';
import * as events from 'aws-cdk-lib/aws-events';
import * as targets from 'aws-cdk-lib/aws-events-targets';
import * as iam from 'aws-cdk-lib/aws-iam';

export class SnsEventbridgeSqsStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: StackProps) {
    super(scope, id, props);

    // 1. SNS Topic (input source)
    const sourceTopic = new sns.Topic(this, 'SourceSnsTopic', {
      displayName: 'POC SNS Topic',
    });

    // 2. EventBridge Bus
    const bus = new events.EventBus(this, 'CustomEventBus', {
      eventBusName: 'poc-conversion-bus',
    });

    // 3. SQS Queue (final destination)
    const targetQueue = new sqs.Queue(this, 'TargetQueue', {
      visibilityTimeout: Duration.seconds(30),
    });

    // 4. IAM Role: allow EventBridge to send to SQS
    const ebToSqsRole = new iam.Role(this, 'EbToSqsRole', {
      assumedBy: new iam.ServicePrincipal('events.amazonaws.com'),
    });

    ebToSqsRole.addToPolicy(
      new iam.PolicyStatement({
        actions: ['sqs:SendMessage'],
        resources: [targetQueue.queueArn],
      })
    );

    // 5. EventBridge Rule: basic JSON transformation
    const rule = new events.Rule(this, 'EventBridgeRule', {
      eventBus: bus,
      eventPattern: {
        source: ['custom.sns'],
      },
      targets: [
        new targets.SqsQueue(targetQueue, {
          message: events.RuleTargetInput.fromObject({
            transformed: events.EventField.fromPath('$.detail'),
            timeReceived: events.EventField.time,
            source: events.EventField.source,
          }),
          role: ebToSqsRole,
        }),
      ],
    });

    // 6. SNS â†’ EventBridge subscription using EventBridge's SNS target ARN
    sourceTopic.addSubscription(
      new sns_subs.UrlSubscription(
	`https://events.${cdk.Stack.of(this).region}.amazonaws.com/`,

        {
          rawMessageDelivery: true,
        }
      )
    );

    // Optional: Output useful info
    new CfnOutput(this, 'SNSTopicArn', { value: sourceTopic.topicArn });
    new CfnOutput(this, 'SQSDestinationArn', { value: targetQueue.queueArn });
    new CfnOutput(this, 'EventBusName', { value: bus.eventBusName });
  }
}
