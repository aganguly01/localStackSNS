//Bin file

#!/usr/bin/env node
import * as cdk from 'aws-cdk-lib';
import { SnsEventbridgeSqsStack } from '../lib/sns-eventbridge-sqs-stack';

const app = new cdk.App();

// For dev environment
new SnsEventbridgeSqsStack(app, 'SnsEventbridgeSqsStackDev', {
  envName: 'dev',          // ðŸ‘ˆ define here
  env: { account: '123456789012', region: 'us-east-1' },
});

// For prod environment
new SnsEventbridgeSqsStack(app, 'SnsEventbridgeSqsStackProd', {
  envName: 'prod',         // ðŸ‘ˆ define here
  env: { account: '123456789012', region: 'us-east-1' },
});

/Actual Stack
import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as sns from 'aws-cdk-lib/aws-sns';
import * as sqs from 'aws-cdk-lib/aws-sqs';
import * as lambda from 'aws-cdk-lib/aws-lambda';
import * as events from 'aws-cdk-lib/aws-events';
import * as targets from 'aws-cdk-lib/aws-events-targets';
import * as snsSubscriptions from 'aws-cdk-lib/aws-sns-subscriptions';
import * as path from 'path';

interface StackProps extends cdk.StackProps {
  envName: string; // dev/test/prod
}

export class SnsEventbridgeSqsStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props: StackProps) {
    super(scope, id, props);

    const prefix = `myapp-${props.envName}`;

    // SNS Topic
    const topic = new sns.Topic(this, 'SourceSNSTopic', {
      topicName: `${prefix}-source-topic`,
      displayName: 'Source SNS Topic',
    });

    // SQS Queue
    const destinationQueue = new sqs.Queue(this, 'DestinationQueue', {
      queueName: `${prefix}-destination-queue`,
    });

    // EventBridge Bus
    const eventBus = new events.EventBus(this, 'CustomEventBus', {
      eventBusName: `${prefix}-json-transform-bus`,
    });

    // Lambda to forward SNS -> EventBridge
    const snsToEventBridgeLambda = new lambda.Function(this, 'SnsToEventBridgeLambda', {
      functionName: `${prefix}-sns-to-eb-lambda`,
      runtime: lambda.Runtime.NODEJS_20_X,
      handler: 'index.handler',
      code: lambda.Code.fromAsset(path.join(__dirname, '../lambda-handler')),
      environment: {
        EVENT_BUS_NAME: eventBus.eventBusName,
      },
    });

    // Grant Lambda permission to put events
    eventBus.grantPutEventsTo(snsToEventBridgeLambda);

    // Subscribe Lambda to SNS
    topic.addSubscription(new snsSubscriptions.LambdaSubscription(snsToEventBridgeLambda));

    // EventBridge Rule â†’ Forward to SQS
    new events.Rule(this, 'EBRuleForwardToSQS', {
      ruleName: `${prefix}-json-transform-and-forward`,
      eventBus: eventBus,
      eventPattern: {
        source: ['custom.sns.source'],
      },
      targets: [
        new targets.SqsQueue(destinationQueue, {
          message: events.RuleTargetInput.fromObject({
            sourceSystem: 'request-decisioning-service',
            workflowStageType: 'CONCERN_INITIATED',
            decisionOutComeRequestContext: {
              decisionOutComeRequestId: events.EventField.fromPath('$.detail.decisionOutComeRequestId'),
              decisionOutComeRequestItems: [],
            },
            decisionOutComeContextItems: [
              {
                decisionOutComeId: events.EventField.fromPath('$.detail.eventDataList[0].decisionOutComeId'),
                decisionOutComeItems: [],
              },
            ],
          }),
        }),
      ],
    });
  }
}

#loggroup

import * as cdk from "aws-cdk-lib";
import { Construct } from "constructs";
import * as lambda from "aws-cdk-lib/aws-lambda";
import * as logs from "aws-cdk-lib/aws-logs";

export class LambdaWithFixedLogGroupStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    // Define a log group with a fixed name
    const logGroup = new logs.LogGroup(this, "MyLambdaLogGroup", {
      logGroupName: "/my-app/dev/my-lambda", // <--- fixed name
      retention: logs.RetentionDays.ONE_WEEK,
      removalPolicy: cdk.RemovalPolicy.DESTROY, // safe for dev/test, avoid in prod
    });

    const myLambda = new lambda.Function(this, "MyLambda", {
      runtime: lambda.Runtime.NODEJS_18_X,
      handler: "index.handler",
      code: lambda.Code.fromAsset("lambda"),
      logRetention: logs.RetentionDays.INFINITE, // wonâ€™t matter, since we override
    });

    // Attach Lambda permissions to write logs
    logGroup.grantWrite(myLambda);
  }
}

import * as logs from "aws-cdk-lib/aws-logs";
import * as events from "aws-cdk-lib/aws-events";

const logGroup = new logs.LogGroup(this, "MyLogGroup", {
  logGroupName: `/${props.envName}/eventbridge-log-group`,
  removalPolicy: RemovalPolicy.DESTROY, // auto delete on stack destroy
  retention: logs.RetentionDays.ONE_WEEK,
});

new events.Rule(this, "MyRule", {
  // ...
  targets: [new targets.CloudWatchLogGroup(logGroup)],
});


