import { EventBridgeClient, PutEventsCommand } from "@aws-sdk/client-eventbridge";

const EVENT_BUS_NAME = process.env.EVENT_BUS_NAME || "my-bus";
const REGION = process.env.AWS_REGION || "us-east-1";
const client = new EventBridgeClient({ region: REGION });

export const handler = async (event) => {
  console.log("Incoming event:", JSON.stringify(event));

  // Timeout control
  const controller = new AbortController();
  const timeoutMs = 5000;
  const timeout = setTimeout(() => controller.abort(), timeoutMs);

  try {
    const result = await client.send(
      new PutEventsCommand({
        Entries: [
          {
            EventBusName: EVENT_BUS_NAME,
            Source: "test.lambda",
            DetailType: "TestEvent",
            Detail: JSON.stringify({ message: "Hello from Lambda!" }),
          },
        ],
      }),
      { abortSignal: controller.signal } // enforce timeout
    );

    console.log("EventBridge response:", JSON.stringify(result));
    return { statusCode: 200, body: "Event published successfully!" };

  } catch (err) {
    if (err.name === "AbortError") {
      console.error(`Request timed out after ${timeoutMs}ms`);
      return { statusCode: 504, body: "Timed out" };
    } else {
      console.error("Error publishing to EventBridge:", err);
      return { statusCode: 500, body: `Failed: ${err.message}` };
    }
  } finally {
    clearTimeout(timeout);
  }
};

